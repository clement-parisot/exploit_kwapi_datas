from pandas import *
import os
import matplotlib.pyplot as plt
import matplotlib.cm as cmx
import matplotlib.colors as colors
import time
import numpy as np
plots = []

def format_matlab(index, plot_list, day = True, colors_list = None):
    if not colors_list:
        colors_list = []
        color_norm  = colors.Normalize(vmin=0, vmax=len(plot_list)-1)
        scalar_map_day = cmx.ScalarMappable(norm=color_norm, cmap='Greens') 
        scalar_map_night = cmx.ScalarMappable(norm=color_norm, cmap='Reds') 
        for i in range(len(plot_list)):
            plot_list[i] = [x[0] for x in plot_list[i].values]
            if day:
                colors_list.append(scalar_map_day.to_rgba(i))
            else:
                colors_list.append(scalar_map_night.to_rgba(i))
        print "Plot"
    plt.stackplot(index, plot_list, colors=colors_list)
    plt.show()  
    return colors_list

i = 0
for f in os.listdir("datas/"):
    if f.endswith(".json.out"):
        print f
        try:
            plots.append(read_json(path_or_buf="datas/"+f, orient="split"))
        except e:
            print e
        i+=1

print "Unified frequency to 1s"
plots = map(pandas.DataFrame.asfreq, plots, ['1s']*len(plots), ['pad']*len(plots))
print "Streched data from 2015-01-01 to 2015-02-19"
plots = [x['2015-01-28':'2015-02-19'] for x in plots]

print "Resample"
plots = map(pandas.DataFrame.resample, plots, ['1800s']*len(plots), ["mean"]*len(plots))
index = plots[0].index
print "Filter weekends"
weekends = filter(lambda x: x.weekday() >= 5, index)
weekends_data = []
for i in range(len(plots)):
    weekends_data.append(plots[i].reindex(weekends).values)
#format_matlab(weekends, weekends_data)
print "weekends mean", np.array(weekends_data).mean()

print "Filter weekends night"
weekends_night = filter(lambda x: x.hour >= 19 or x.hour < 9, weekends)
weekends_data_night = []
for i in range(len(plots)):
    weekends_data_night.append(plots[i].reindex(weekends_night).values)
#format_matlab(index, weekends_data_night)
print "weekends night mean", np.array(weekends_data_night).mean()
#print len(read_json(path_or_buf="datas/"+f, orient="split").values)
del weekends_night
del weekends_data_night

print "Filter weekends day"
weekends_day = filter(lambda x: x.hour < 19 and x.hour >= 9, weekends)
weekends_data_day = []
for i in range(len(plots)):
    weekends_data_day.append(plots[i].reindex(weekends_day).values)
#format_matlab(index, weekends_data_day)
print "weekends day mean", np.array(weekends_data_day).mean()
del weekends_day
del weekends_data_day
del weekends
del weekends_data
print "Filter weekdays"
weekdays = filter(lambda x: x.weekday() < 5, index)
weekdays_data = []
for i in range(len(plots)):
    weekdays_data.append(plots[i].reindex(weekdays).values)

#format_matlab(index, weekdays_data)
print "weekdays mean", np.array(weekdays_data).mean()
print "Filter weekdays night"
weekdays_night = filter(lambda x: x.hour >= 19 or x.hour < 9, weekdays)
weekdays_data_night = []
for i in range(len(plots)):
    weekdays_data_night.append(plots[i].reindex(weekdays_night).values)
#colors_night = format_matlab(index, weekdays_data_night, day = False)
print "weekdays night  mean", np.array(weekdays_data_night).mean()
del weekdays_night
#del weekdays_data_night

print "Filter weekdays day"
weekdays_day = filter(lambda x: x.hour < 19 and x.hour >= 9, weekdays)
weekdays_data_day = []
for i in range(len(plots)):
    weekdays_data_day.append(plots[i].reindex(weekdays_day).values)
#colors_day = format_matlab(index, weekdays_data_day)
print "weekdays days mean", np.array(weekdays_data_day).mean()
#colors_all = colors_night + colors_day
#data_all = weekdays_data_day + weekdays_data_night
#print len(colors_all) , len(data_all), len(weekdays_data_day)
#format_matlab(index, data_all, colors_list= colors_all)
del weekdays_day
del weekdays_data_day
del weekdays
del weekdays_data
print "Format for matplot"

print "Resample"
plots = map(pandas.DataFrame.resample, plots, ['D']*len(plots), ["mean"]*len(plots))
index = plots[0].index

#format_matlab(index, plots)


